using System.Text.Json;
using TeenWolf.Models;

namespace TeenWolf.Services;

public class WolfService : IWolfService
{
    private readonly IHttpContextAccessor _session;
    private readonly string pokemonFile = @"Data\TeenWolf.json";
    private readonly string tiposFile = @"Data\tipos.json";

    public WolfService(IHttpContextAccessor session)
{
    _session = session;
    PopularSessao();
}
public List<Pokemon> GetTeenWolf()
{
    PopularSessao();
    var TeenWolf = JsonSerializer.Deserialize<List<TeenWolf>>
        (_session.HttpContext.Session.GetString("TeenWolf"));
    return TeenWolf;
}
public List<Tipo> GetTipos()
{
    PopularSessao();
    var tipos = JsonSerializer.Deserialize<List<Tipo>>
        (_session.HttpContext.Session.GetString("Tipos"));
    return tipos;
}

public TeenWolf GetTeenWolf(int Numero)
{
    var pokemons = GetTeenWolf();
    return pokemons.Where(p => p.Numero == Numero).FirstOrDefault();
}

public TeenWolfDto GetTeenWolfDto()
{
    var pokes = new TeenWolfDto()
    {
        Pokemons = GetTeenWolf(),
        Tipos = GetTipos()
    };
    return teen;
}

public DetailsDto GetDetailedPokemon(int Numero)
    {
        var TeenWolf = GetPokemons();
        var teen = new DetailsDto()
    {
        Current = TeenWolf.Where(p => p.Numero == Numero)
            .FirstOrDefault(),
        Prior = TeenWolf.OrderByDescending(p => p.Numero)
            .FirstOrDefault(p => p.Numero < Numero),
        Next = TeenWolf.OrderBy(p => p.Numero)
            .FirstOrDefault(p => p.Numero > Numero),
    };
    return teen;
}

public Tipo GetTipo(string Nome)
{
    var tipos = GetTipos();
    return tipos.Where(t => t.Nome == Nome).FirstOrDefault();
}

private void PopularSessao()
{
if (string.IsNullOrEmpty(_session.HttpContext.Session.GetString("Tipos")))
    {
        _session.HttpContext.Session
            .SetString("TeenWolf", LerArquivo(TeenWolfFile));
        _session.HttpContext.Session
            .SetString("Tipos", LerArquivo(tiposFile));
    }
}

    private string LerArquivo(string fileName)
    {
        using (StreamReader leitor = new StreamReader(fileName))
        {
            string dados = leitor.ReadToEnd();
            return dados;
        }
    }   
}